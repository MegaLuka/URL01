version: 2.1
orbs:
  slack: circleci/slack@4.12.5
  aws-cli: circleci/aws-cli@4.0.0
  #aws-cli: circleci/aws-cli@2.0.3
  #aws-cli: circleci/aws-cli@3.1.5


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
      description: Revert the last migration
      parameters:
        workflow_id:
          type: string      
      steps:
        - run:
            name: Revert migration
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/5zH9mrmfztubRshnf4AB5w/migration_<< parameters.workflow_id >>)
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     channel: $SLACK_DEFAULT_CHANNEL
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     channel: $SLACK_DEFAULT_CHANNEL
      #     template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  #           npm audit --audit-level=critical
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  #           npm audit --audit-level=critical
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
       #- image: python:3.8
       - image: cimg/python:3.11.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["37:83:12:9b:af:b2:7f:0f:2a:b7:77:08:f3:0d:c2:2b"]
      - attach_workspace:
          at: ~/
      # Add ssh keys with fingerprint
      #attach workspace
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ansible
            python3 -m pip install --upgrade --user ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
  run-migrations:
    docker:
      #- image: circleci/node:13.8.0
      - image: cimg/python:3.11.4-node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then curl https://kvdb.io/5zH9mrmfztubRshnf4AB5w/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      #- image: amazon/aws-cli
      #- image: cimg/python:3.8.11-node
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "default"
      - run:
          name: Install tar utility
          command: |
            yarn add -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     # Here's where you will add some code to rollback on failure     

  deploy-backend:
    docker:
      - image: cimg/node:13.9.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          profile_name: "default"
      # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["37:83:12:9b:af:b2:7f:0f:2a:b7:77:08:f3:0d:c2:2b"]
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install tar gzip -y
            sudo apt install python3-pip -y
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ansible
            python3 -m pip install --upgrade --user ansible
            sudo apt install curl -y
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # go to place store file?
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
  
  smoke-test:
    docker:
      - image: cimg/node:13.9.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          profile_name: "default"
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install curl -y
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            echo "work"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 1
            else
              exit 1
            fi
      - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      # - build-frontend:
      #          context: my-context-megaluka
      # - build-backend:
      #          context: my-context-megaluka
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
            context: my-context-megaluka
          # requires: [build-frontend, build-backend]
      # - hold: # <<< A job that will require manual approval in the CircleCI web application.
      #     type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
      #     requires: # We only run the "hold" job when test2 has succeeded
      #      - deploy-infrastructure
      - configure-infrastructure:
           context: my-context-megaluka
           requires: 
          #  - hold
             - deploy-infrastructure
          # requires: [deploy-infrastructure]
  
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend:
            requires: [configure-infrastructure]
      - deploy-backend:
            requires: [deploy-frontend, configure-infrastructure]
          #requires: [configure-infrastructure]
      - smoke-test:
            requires: [configure-infrastructure, deploy-frontend, deploy-backend]


